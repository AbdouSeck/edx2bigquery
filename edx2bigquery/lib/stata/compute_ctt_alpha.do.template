*
* File:   {script_name}
* Date:   {the_date}
*
* Compute Cronbach's alpha for all course items
*
* This version: {course_id}
*
* TEMPLATE: {template_file}

clear all
capture log close _all
pause off
set more off
set linesize 200
set matsize 2048

*****************************************************************************
* directory and course_id

cd {working_dir}

log using "{log_file}", replace name(mainlog)

*****************************************************************************
* global macros

global working_dir = "{working_dir}"
global bin_dir = "{bin_dir}"
global lib_dir = "{lib_dir}"
global project_id = "{project_id}"
global force_recompute = {force_recompute}

*****************************************************************************
* local macros

local course_id = "{course_id}"
local output_table = "{output_table}"
local is_harvard = regexm("`course_id'", "HarvardX/.*")

local cidns = "{cidns}"			// subinstr("`course_id'", "/", "__", 2)
local table_prefix =  "{table_prefix}"
local gsdir = "gs://`project_id'/`cidns'/DIST"

local stitle = "[`course_id']"

*****************************************************************************
* utility stata programs

run {lib_dir}/stata/edx2bq_util.do

****************************************
* table of items: one per problem

local ulfn = "DATA/DATA-`cidns'-item-listings-unique.dta"
di "ulfn = `ulfn'"
capture confirm file "`ulfn'"
if ((_rc > 0) | 0 | $force_recompute) {{

	get_bq_data_csv "`table_prefix'.course_item"  "`table_prefix'__course_item.csv"  "DATA/DATA-`cidns'__course_item.dta"
	* get_dataset_gzip_ok DATA/DATA-`cidns'__course_item.dta
	
	drop if !(item_number==1)
	drop item_id
	drop item_weight item_number
	drop item_short
	drop item*
	rename problem_id problem_url
	* gen plabel = "[" + string(problem_nid) + "] " + problem_url + " " + chapter_name + "/" + section_name + "/" + problem_name

	capture gen plabel = "[" + string(problem_nid) + "] " + problem_short_id + " " + chapter_name + "/" + section_name + "/" + problem_name

	if (_rc > 0){{
		* some courses don't use chapter and section names
		gen plabel = "[" + string(problem_nid) + "] " + problem_short_id + "/" + problem_name
	}}
	
	save DATA/DATA-`cidns'-item-listings.dta, replace

	* make version with problem_url guaranteed unique
	collapse (min) problem_nid (firstnm) plabel, by(problem_url)
	save "`ulfn'", replace
}}
else{{
	use "`ulfn'", replace
}}

*****************************************************************************
* get person responses to items (item matrix, wide)

local pitemfn = "DATA/DATA-`cidns'__person_problem_wide.dta"
di "pitemfn = `pitemfn'"
capture confirm file "`pitemfn'"
if ((_rc > 0) | 0 | $force_recompute) {{

	* start with long table, direct from bigquery
	get_bq_data_csv "`table_prefix'.person_problem"  "`table_prefix'__person_problem.csv"  "DATA/DATA-`cidns'__person_problem.dta"

	* drop raw_score column
	drop problem_ra~e  
	
	* rename pct_score to be "item" 
	rename problem_pc~e pct_score 

	* now the columns are user_id, problem_nid, pct_score
	* make wide version
	rename pct_score y
	keep user_id problem_nid y
	reshape wide y, i(user_id) j(problem_nid)

	summarize

	* add labels to variables
	foreach x of varlist y* {{
		local inum = substr("`x'", 2, length("`x'"))
		preserve
		use "`ulfn'", replace
		local xlabel = subinstr(plabel[`inum'], char(34), "", 100)
		* di `"`xlabel'"'
		* local xlabel = plabel[`inum']
		restore
		quietly label var `x' `"`xlabel'"'
	}}

	fsum, label

	save "`pitemfn'", replace
}}

*****************************************************************************
* compute alpha; store alpha results as a table

local ofn = "DATA/DATA-`cidns'-item-reliability-alpha.csv"
di "ofn = `ofn'"
capture confirm file "`ofn'"
if ((_rc > 0) | 0 | $force_recompute) {{

	use "`pitemfn'", replace

	alpha y*, asis item label

	* alpha results
	matrix amat = r(Alpha)', r(ItemTestCorr)', r(ItemRestCorr)', r(MeanInterItemCov)'
	matname amat "Alpha ItemTestCorr ItemRestCorr ItemItemCov", col(.) explicit
	local avars : rownames amat	// variables used in alpha calculation (if not vary, dropped)
	di "alpha items = `avars'"
	
	* nobs and mean
	quiet mean `avars'
	matrix anmat = amat, e(b)', e(_N)'
	matname anmat "mean nobs", col(5..6) explicit
	local cnt = 1
	foreach yv of varlist `avars' {{
	    quiet summ `yv'
	    matrix anmat[`cnt', 5] = r(mean)
	    matrix anmat[`cnt', 6] = r(N)
	    local cnt = `cnt' + 1
	}}
	
	* save item labels (inefficiently, but this works for small numbers of items)
	foreach yv of varlist `avars' {{
		local lab_`yv': variable label `yv'
	}}	

	* preserve
	clear
	quiet svmat anmat, names(col)

	* item names
	local names : rownames anmat
	local cnt = 1
	gen item = ""
	foreach rn in `names' {{
		quiet replace item = "`rn'" in `cnt'
		local cnt = `cnt' + 1
	}}
	order item nobs mean
	* restore
	
	gen item_label = ""
	local N = _N
	forvalues k = 1/`N' {{
		local iname = item[`k']
		quiet replace item_label = "`lab_`iname''" in `k'
	}}

	outsheet * using "`ofn'", comma replace
	di "Stored Cronbach's Alpha results in `ofn'"

	* output variables list, for schema
	describe, replace clear
	outsheet * using DATA/DATA-`cidns'-item-reliability-alpha__schema.csv, comma replace
}}

*****************************************************************************
* upload dataset back to bigquery

	import delimited "`ofn'", encoding(ISO-8859-1)clear

	upload_data_to_bq "`table_prefix'.`output_table'" `ofn' 0 "{script_name} for {course_id} computed {the_date}"

*****************************************************************************
* all done

exit, clear
